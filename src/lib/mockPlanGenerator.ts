import { ProjectPlan, PlanGenerationRequest } from '../types/plan';\n\n// Mock plan generator for development - replace with real API call in production\nexport const generateMockPlan = async (request: PlanGenerationRequest): Promise<ProjectPlan> => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  const mockPlan: ProjectPlan = {\n    title: `${request.projectType} Project`,\n    description: `A comprehensive ${request.projectType.toLowerCase()} solution tailored to your specific requirements and budget constraints. This project will deliver a modern, scalable, and user-friendly solution that meets industry standards.`,\n    phases: [\n      {\n        name: \"Planning & Discovery\",\n        duration: \"2-3 weeks\",\n        tasks: [\n          \"Requirements gathering\",\n          \"Technical analysis\",\n          \"Architecture design\",\n          \"Project roadmap creation\"\n        ],\n        deliverables: [\n          \"Project specification document\",\n          \"Technical architecture\",\n          \"Project timeline\"\n        ]\n      },\n      {\n        name: \"Development Phase 1\",\n        duration: \"4-6 weeks\",\n        tasks: [\n          \"Core functionality development\",\n          \"Database setup\",\n          \"User interface creation\",\n          \"Initial testing\"\n        ],\n        deliverables: [\n          \"MVP version\",\n          \"Core features\",\n          \"Initial user interface\"\n        ]\n      },\n      {\n        name: \"Development Phase 2\",\n        duration: \"3-4 weeks\",\n        tasks: [\n          \"Advanced features\",\n          \"Integration testing\",\n          \"Performance optimization\",\n          \"Security implementation\"\n        ],\n        deliverables: [\n          \"Complete application\",\n          \"Performance report\",\n          \"Security audit\"\n        ]\n      },\n      {\n        name: \"Testing & Deployment\",\n        duration: \"1-2 weeks\",\n        tasks: [\n          \"Comprehensive testing\",\n          \"Bug fixes\",\n          \"Deployment setup\",\n          \"User training\"\n        ],\n        deliverables: [\n          \"Tested application\",\n          \"Deployment documentation\",\n          \"User manual\"\n        ]\n      }\n    ],\n    timeline: request.timeline,\n    budget: {\n      range: request.budget,\n      breakdown: [\n        {\n          category: \"Development\",\n          amount: \"60%\",\n          description: \"Core development work including frontend and backend\"\n        },\n        {\n          category: \"Design & UX\",\n          amount: \"20%\",\n          description: \"User experience design and visual design work\"\n        },\n        {\n          category: \"Testing & QA\",\n          amount: \"15%\",\n          description: \"Quality assurance and testing processes\"\n        },\n        {\n          category: \"Project Management\",\n          amount: \"5%\",\n          description: \"Project coordination and management overhead\"\n        }\n      ]\n    },\n    risks: [\n      \"Scope creep during development phase\",\n      \"Integration complexity with existing systems\",\n      \"Timeline delays due to unforeseen technical challenges\",\n      \"Third-party service dependencies and reliability\"\n    ],\n    recommendations: [\n      \"Implement agile development methodology for flexibility\",\n      \"Set up continuous integration and deployment pipelines\",\n      \"Conduct regular stakeholder reviews and feedback sessions\",\n      \"Plan for post-launch maintenance and support\",\n      \"Consider scalability requirements from the beginning\"\n    ]\n  };\n\n  return mockPlan;\n};\n